import fractions
class Fraction(object):
    # TODO: write your code here
    #pass
    def __init__(self,numerator,denominator):
        self._numerator=numerator
        self._denominator=denominator
    def __sub__(self,other):
        fraction_1= fractions.Fraction(self._numerator, self._denominator)
        fraction_2= fractions.Fraction(other._numerator, other._denominator)
        if(fraction_1-fraction_2).denominator==1:
            print(str(fraction_1) +' - '+str(fraction_2)+' = '+str(fraction_1-fraction_2)+'/'+str(1))
        else:
            print(str(fraction_1) +' - '+str(fraction_2)+' = '+str(fraction_1-fraction_2))
        return fraction_1-fraction_2
        
    @property
    def numerator(self):
        return self._numerator
    @property
    def denominator(self):
        return self._denominator
    



if __name__ == "__main__":
    import json

    input_args = list(json.loads(input()))

    fraction_one = Fraction(*input_args[0])
    fraction_two = Fraction(*input_args[1])

    result_fraction = fraction_one - fraction_two

    try:
        fraction_one._numerator
    except AttributeError:
        print("Missed protecting numerator")

    try:
        fraction_one._denominator
    except AttributeError:
        print("Missed protecting denominator")

    try:
        fraction_one.numerator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    try:
        fraction_one.denominator = 1
        print("Missed setting safe access to numerator")
    except AttributeError:
        pass

    print(isinstance(fraction_one, Fraction))
    print(isinstance(fraction_two, Fraction))
    print(result_fraction.numerator)
    print(result_fraction.denominator)
